// 조회수 로직
import { Request, Response } from 'express';
import { findArticleById, increaseArticleViewCount } from './articleService';
import redis from './redisClient';

// 클라이언트 IP 추출 Function
const getClientIp = (request: Request): string => {
  const ipString =
    (request.headers['x-forwarded-for'] as string) ||
    (request.socket.remoteAddress as string);

  let ipAddress: string = ipString;
  if (ipString.includes(',')) {
    ipAddress = ipString.split(',')[0];
  } else if (ipString.includes(':')) {
    ipAddress = ipString.split(':').slice(-1)[0];
  }

  return ipAddress.trim();
}

// 비동기적으로 조회수 증가를 처리하는 함수
const asyncUpdateViewCount = async (articleId: number, identifier: string, isMember: boolean) => {
  try {
    const redisKey = isMember 
      ? `article:${articleId}:MEMBER:${identifier}` 
      : `article:${articleId}:IP:${identifier}`;
    
    const isAlreadyCounted = await redis.get(redisKey);

    if (!isAlreadyCounted) {
      // Redis에 조회 기록 설정 (24시간 만료)
      await redis.set(redisKey, '1', 'EX', 60 * 60 * 24);

      // 조회수를 비동기적으로 증가
      await increaseArticleViewCount(articleId);
    }
  } catch (error) {
    console.error('Error updating view count:', error);
  }
}

// 게시글 조회 Controller Function
export const getArticle = async (request: Request, response: Response) => {
  const { articleId } = request.params;
  const { member } = response.locals;

  try {
    // 게시글 조회
    const findArticle = await findArticleById(parseInt(articleId));

    if (!findArticle) {
      return response.status(404).json({ message: "Article not found" });
    }

    if (member == null) {
      // 비회원일 경우 IP 기반 조회수 체크
      const ip = getClientIp(request);
      asyncUpdateViewCount(parseInt(articleId), ip, false);
    } else {
      // 회원일 경우, 회원 ID 기반 조회수 체크
      const memberId = member.id;
      asyncUpdateViewCount(parseInt(articleId), memberId, true);
    }

    return response.status(200).json(findArticle);

  } catch (error) {
    console.error('Error fetching article:', error);
    return response.status(500).json({ message: "SERVER ERROR" });
  }
}
