DROP SEQUENCE COMMUNITY_SEQ;
-- COMMUNITY 테이블 시퀀스 --
CREATE SEQUENCE COMMUNITY_SEQ
START WITH 1
INCREMENT BY 1
MINVALUE 0
NOCACHE
NOCYCLE;

DROP TABLE COMMUNITY_TABLE PURGE;
-- 커뮤니티 테이블 --
CREATE TABLE COMMUNITY_TABLE(
	COMMUNITY_IDX NUMBER CONSTRAINT PK_COMMUNITY PRIMARY KEY,
	COMMUNITY_SUBJECT VARCHAR2(500) NOT NULL,
	COMMUNITY_TEXT CLOB,
    COMMUNITY_FILE VARCHAR2(500),
	COMMUNITY_WRITER_IDX NUMBER NOT NULL,
    COMMUNITY_VIEW NUMBER DEFAULT 0,
    COMMUNITY_COMMENT NUMBER DEFAULT 0,
	COMMUNITY_DATE DATE NOT NULL,
    COMMUNITY_TYPE VARCHAR2(50) NOT NULL,     -- 게시판 타입 : TEXT, IMAGE, RANKING, PROMOTION
    COMMUNITY_CATEGORY VARCHAR2(50) NOT NULL, -- 게시판 유형: all, popular, free, question, my_ranking, review, promotion
    COMMUNITY_URL VARCHAR2(500),
    COMMUNITY_THUMB VARCHAR2(500),
    COMMUNITY_UPVOTES NUMBER DEFAULT 0,  -- 업보트 수를 저장하는 컬럼
    COMMUNITY_DOWNVOTES NUMBER DEFAULT 0, -- 다운보트 수를 저장하는 컬럼
    COMMUNITY_SORT_ORDER VARCHAR2(20) DEFAULT 'latest', -- 정렬 기준: latest, HOT
    COMMUNITY_VIEW_TYPE VARCHAR2(20) DEFAULT 'compact',-- 뷰 타입: text, compact, card
    SCORE NUMBER
);

DROP TRIGGER community_idx_trigger;
CREATE OR REPLACE TRIGGER community_idx_trigger
BEFORE INSERT ON COMMUNITY_TABLE
FOR EACH ROW
BEGIN
  -- COMMUNITY_IDX 값이 NULL일 경우 시퀀스를 사용하여 값을 설정
  IF :NEW.COMMUNITY_IDX IS NULL THEN
    SELECT COMMUNITY_SEQ.NEXTVAL INTO :NEW.COMMUNITY_IDX FROM DUAL;
  END IF;
END;
/
DROP TABLE VOTE_HISTORY PURGE;
CREATE TABLE VOTE_HISTORY (
    ID NUMBER PRIMARY KEY,
    USER_ID NUMBER NOT NULL,  -- 투표한 사용자 ID
    POST_ID NUMBER NOT NULL,  -- 투표 대상 게시물 ID, COMMUNITY_TABLE의 COMMUNITY_IDX 참조
    VOTE_TYPE VARCHAR2(10) CHECK (VOTE_TYPE IN ('UP', 'DOWN')),  -- 투표 유형 (UP 또는 DOWN)
    VOTE_DATE DATE DEFAULT SYSDATE,  -- 투표 날짜
    CONSTRAINT UNQ_USER_POST UNIQUE (USER_ID, POST_ID),
    CONSTRAINT FK_VOTE_POST FOREIGN KEY (POST_ID) REFERENCES COMMUNITY_TABLE(COMMUNITY_IDX)  -- 외래 키 제약 조건 추가
);

CREATE INDEX idx_community_date ON COMMUNITY_TABLE (COMMUNITY_DATE);
CREATE INDEX idx_community_upvotes ON COMMUNITY_TABLE (COMMUNITY_UPVOTES);
CREATE INDEX idx_community_downvotes ON COMMUNITY_TABLE (COMMUNITY_DOWNVOTES);
CREATE INDEX idx_score ON COMMUNITY_TABLE (SCORE);  

DROP TABLE COMM_SCRAP_TABLE PURGE;
CREATE TABLE COMM_SCRAP_TABLE (
    USER_IDX NUMBER NOT NULL,
    COMMUNITY_IDX NUMBER NOT NULL
);

DESC COMMUNITY_TABLE;
SELECT * FROM COMMUNITY_TABLE ORDER BY COMMUNITY_IDX;
COMMIT;

SELECT * FROM COMM_SCRAP_TABLE;